
회원 인증 시나리오 및 처리 로직

SNS 로그인 후 access_token, sns email 등 사용자 정보 처리할 화면이 있어야합니다

1) 이메일/비밀번호로 가입 후 로그인
    가입 
        POST /v1/auth/register {
            email, nickname, phone_number, birthdate, gender, password, password_confirmation, marketing_agreed
        }:
            핸드폰 인증 여부, 핸드폰 번호 중복, 이메일, 닉네임, 비밀번호 확인
            성공시 해당 사용자 JWT 응답 access_toke=>본문, refresh_token=>쿠키
            실패시 에러메세지 
    로그인
        POST /v1/auth/login {
            email, password 
        }:
            이메일, 비밀번호 확인 후
            성공시 해당 사용자 JWT 응답 access_toke=>본문, refresh_token=>쿠키
            토큰 저장 등의 처리 후 로그인 후 이동하는 화면으로(프론트엔드) 이동

2) 연동된 계정 있거나, SNS로 최초 인증 시(SNS 계정 이메일 정보 있고, 동일한 이메일 계정 있을 때 자동 연동)
    GET /v1/auth/login/{provider}(백엔드) => {provider} 값에 따라 kakao 혹은 google 로그인 화면으로 이동
    해당 플랫폼 로그인 성공 시 
        GET /v1/auth/callback/{kakao|google}(백엔드) 으로 화면이동
        동일한 이메일 계정 조회 및 연결 후 SNS 로그인 후 처리할 화면(프론트엔드)으로 이동
            cookies {
                "OAUTH_LOGIN_STATUS" : "success" 
                "refresh_token" : refresh token httpOnly
            }
            이동된 프론트엔드 화면에서 cookie 정보를 바탕으로 로그인 성공 여부 판단 후 
                access_token 요청
                => GET "/v1/auth/refresh"으로 토큰 요청
                토큰 저장 등의 처리 후 원래 로그인 후 이동하는 화면(프론트엔드)로 이동

3) SNS로 최초 인증 (SNS 계정 이메일 정보 있음, 동일한 이메일 계정 없음)
    GET /v1/auth/login/{provider}(백엔드) => {provider} 값에 따라 kakao 혹은 google 로그인 화면으로 이동
    해당 플랫폼 로그인 성공 시 
        GET /v1/auth/callback/{kakao|google}(백엔드) 으로 화면이동
        SNS 사용자 정보를 JWT에 담아 쿠키 설정 후 SNS 로그인 처리할 화면(프론트엔드)으로 이동
            cookies {
                "OAUTH_LOGIN_STATUS" : "continue" 
                "provider_info" : jwtoken
            }
        이동된 프론트엔드 화면에서 GET "v1/auth/provider_email"에서 provider email 받아오기
            cookie의 jwt를 백엔드 서버에서 decode 한 후 email return 함
            응답 : {"email": "example_user_email@gmail.com"}
            회원 가입 화면에서 email 기본값 설정, 수정 불가 처리등 하도록 처리
        회원 가입 화면(프론트엔드)으로 이동 하여
            추가 정보 입력(닉네임, 핸드폰 인증 등) 후 가입 진행 
            POST /v1/auth/register {
                email, nickname, phone_number, birthdate, gender, password, password_confirmation, marketing_agreed
            }
                핸드폰 인증 여부, 핸드폰 번호 중복, 이메일, 닉네임, 비밀번호 확인
                성공시 해당 사용자 JWT 응답 access_toke=>본문, refresh_token=>쿠키

4) SNS로 최초 인증 (이메일 정보 없음)
    GET /v1/auth/login/{provider}(백엔드) => {provider} 값에 따라 kakao 혹은 google 로그인 화면으로 이동
    해당 플랫폼 로그인 성공 시 
        GET /v1/auth/callback/{kakao|google}(백엔드) 으로 화면이동
        SNS 사용자 정보를 JWT에 담아 쿠키 설정 후 SNS 로그인 처리할 화면(프론트엔드)으로 이동
            cookies {
                "OAUTH_LOGIN_STATUS" : "continue" 
                "provider_info" : jwtoken
            }
        이동된 프론트엔드 화면에서 
        이동된 프론트엔드 화면에서 GET "v1/auth/provider_email"에서 provider email 받아오기
            cookie의 jwt를 백엔드 서버에서 decode 한 후 email return 함
            응답 : {"email": null}
            회원 가입 화면에서 email 기본값 설정, 수정 불가 처리 없이 회원 가입 화면으로 이동
        회원 가입 화면(프론트엔드)으로 이동 하여
            추가 정보 입력(닉네임, 핸드폰 인증 등) 후 가입 진행 
            cookies는 자동으로 포함
            POST /v1/auth/register {
                email, nickname, phone_number, birthdate, gender, password, password_confirmation, marketing_agreed
            }
                핸드폰 인증 여부, 핸드폰 번호 중복, 이메일, 닉네임, 비밀번호 확인
                성공시 해당 사용자 JWT 응답 access_toke=>본문, refresh_token=>쿠키

SNS 로그인 성공시 cookie 정보에 따라 위 로직을 처리할 화면 필요함
1) OAUTH_LOGIN_STATUS === "success" 일 때
    GET /v1/auth/refresh 로 access_token 받아서 로그인 처리
2) OAUTH_LOGIN_STATUS === "continue" 일 때
    provider_info 를 직접 decode 하거나
    GET "v1/auth/provider_email"에 요청해서 이메일 확인(SNS 로그인 화면에서 사용자가 동의하지 않은 경우 이메일 없을 수도 있음)
    이후 회원 가입으로 이동 및 이메일 있으면 값고정
    일반 회원 가입과 동일하게 회원 가입 진행(쿠키 자동으로 포함)